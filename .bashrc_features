#!/bin/bash
# .dotfiles/.bashrc_features

function _has_cmd() {
  type $1 &>/dev/null
}
function _is_set() {
  [[ -v $1 ]]
}
function _is_nonempty() {
  [[ -n $1 ]]
}
function _mk_alias(){
  rest="${@:2}"
  alias $1="$rest"
}

## Auto-setup

# bash alias completion
if [ -f ~/.bash_completion.d/complete_alias ]; then
  # Alias completion
  # https://unix.stackexchange.com/questions/4219/how-do-i-get-bash-completion-for-command-aliases
  source ~/.bash_completion.d/complete_alias
  function alias_nice(){
    _mk_alias "$@"
    complete -F _complete_alias $1
  }
else
  function alias_nice(){
    _mk_alias "$@"
  }
fi

# tmux
if _has_cmd tmux; then
  source ~/.dotfiles/tmux/tmux_functions.sh
fi

# direnv
if _has_cmd direnv; then
  eval "$(direnv hook bash)"
  alias_nice tmux 'direnv exec / tmux'
fi

# pyenv
if [ -d "$HOME/.pyenv" ]; then
  export PYENV_ROOT="$HOME/.pyenv"
  export PATH="$PYENV_ROOT/bin:$PATH"
  if _has_cmd pyenv; then
    eval "$(pyenv init -)"
    source $(pyenv root)/completions/pyenv.bash
  fi
fi

# pipx
if _has_cmd pipx; then
  if ! _has_cmd register-python-argcomplete; then
    pipx install argcomplete
  fi
  eval "$(register-python-argcomplete pipx)"
fi

# uv
if _has_cmd uv; then
  eval "$(uv generate-shell-completion bash)"
fi
if _has_cmd uvx; then
  eval "$(uvx --generate-shell-completion bash)"
fi

# node version manager
if [ -d "$HOME/.nvm" ]; then
  # nodejs version manager
  export NVM_DIR="$HOME/.nvm"
  [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
  [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion
fi

# subrepo
if [ -d ~/.local/share/git-subrepo ]; then
  source ~/.local/share/git-subrepo/.rc 2>/dev/null
fi

# docker
# this actually is moreso collection of docker gems?
if _has_cmd docker; then
  docker-rm-created(){
    docker ps --filter "status=created" | awk 'FNR>1{system("docker container rm "$1)}'
  }

fi

# tailscale alias
if _has_cmd tailscale; then
  source <(tailscale completion bash)
  alias_nice ts 'tailscale'
fi

## Explicit Features

# BRC_FEAT_KEYCHAINS="id_rsa"
if _has_cmd keychain && _is_nonempty BRC_FEAT_KEYCHAINS; then
  # Simplify downstream ssh/git pass
  eval `keychain --eval $BRC_FEAT_KEYCHAINS 2>/dev/null`
fi

# BRC_FEAT_GIT_PROXY=1
if _is_set BRC_FEAT_GIT_PROXY; then
  alias_nice git-proxy "HTTPS_PROXY=socks5://127.0.0.1:1080 git"
fi

# BRC_FEAT_WSL=1
if _is_set BRC_FEAT_WSL; then
  if [ -f "/mnt/c/Program Files/Meld/Meld.exe" ] && ! [ -f /usr/local/bin/meld ]; then
    sudo ln -s /mnt/c/Program\ Files/Meld/Meld.exe /usr/local/bin/meld
  fi
fi

# .bashrc_features

