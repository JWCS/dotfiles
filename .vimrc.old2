" .vimrc.old
" Changelog:
" 2019-11-19: Init 'fully working' 'standard' .vimrc

"" Plugins (first, to be overwritten)
" Auto-getting vim-plug if not installed
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif
" Auto-install mising plugins on startup (does not update)
autocmd VimEnter *
  \  if len(filter(values(g:plugs), '!isdirectory(v:val.dir)'))
  \|   PlugInstall --sync | q
  \| endif
" plugin/vimawesome.vim : Searches VimAwesome for plugin completion
"   https://gist.github.com/ur4ltz/d762051480a3f5b8334e74afd5e24b52

"" Plugins, cont
call plug#begin('~/.vim/plugged')

" Documentation
Plug 'kkoomen/vim-doge'
" Requires pip3 install clang, and libclang.so
" May need (in /usr/lib/x86_64-linux-gnu) ln -s libclang-X.0.so.1 libclang.so
let g:doge_doc_standard_cpp = 'doxygen_qt'
let g:doge_doc_standard_c   = 'doxygen_qt'
let g:doge_mapping_comment_jump_forward = '<Leader><Tab>'
let g:doge_mapping_comment_jump_backward = '<Leader><S-Tab>'
let g:doge_mapping = '<Leader>doc' " L-d (default) is expanded diagnostic in ycm
" let g:doge_comment_jump_modes = ['n', 's'] " Removed 'i', so in 'i' mode, use YCM
" To include custom args to clang, in buffer
" let b:doge_clang_args = ['-I', '/my/include/path']

" Auto-complete
Plug 'ycm-core/YouCompleteMe', { 'do': 'python3 ./install.py --clang-completer --clangd-completer' }
" Requires clang-X and libclangY-X for clang, and clang-tools-X for clangd (apt)
" ubuntu16: sudo apt-get install clang-6.0 clang-tools-6.0 libclang1-6.0
let g:ycm_use_clangd = 1 " Want to use clangd unless broken
let g:ycm_autoclose_preview_window_after_insertion = 1
let g:ycm_global_ycm_extra_conf = '~/.vim/.ycm_extra_conf.py'
" Todo: https://stackoverflow.com/questions/24500281/youcompleteme-and-syntastic-compatibility

" Under consideration
" tagbar, delimitMate " https://www.howtoforge.com/tutorial/vim-editor-plugins-for-software-developers/

" From him:
"Plug 'crtlpvim/ctrlp.vim'
call plug#end() " Plugins visible after this, and colorschemes

"" Vim background settings
set history=500 " Limit history
let $LANG='en'
set langmenu=en
" Security
"set exrc " If .vimrc in directory, will execute it (dangerous!) ' I only want my vimrc
"set secure " If that .vimrc is owned by me (chmod/clone), ignored
" Defaults for file encoding
set encoding=utf8
set ffs=unix,dos,mac
" No annoying sound on errors
set noerrorbells
set novisualbell
"set t_vb=
"set tm=500et
" No backups or swap files
set nobackup
set nowb
set noswapfile
" Correct coloring base
set t_Co=256
set background=dark
" Enable filetype plugins
filetype plugin on
filetype indent on

"" Vim interaction management
" leader is ' ', escape insert mode is jj
let mapleader = " "
inoremap jj <ESC>
"set mouse=a " Full mouse support?
" wildmenu
set wildmenu
set wildmode=longest:full,full " Alt: 'longest:list,full', idk yet
" Ignore compiled files
set wildignore=*.o,*~,*.pyc,*/.git/*,*/.hg/*,*/.svn/*,*/.DS_Store

" Configure backspace so it acts as it should act
set backspace=eol,start,indent
set whichwrap+=<,>,h,l

" Searching
set ignorecase
set smartcase
set hlsearch " Highlight search, " Disable highlight when <leader>[Enter] is pressed
map <silent> <leader><cr> :noh<cr>
set incsearch " To make search act as in modern browsers
set lazyredraw " Don't redraw while executing macros (good perf config)
set magic " Allows regex

"" Vim file management
" Set to autoread when a file is changed from the outside
set autoread
" Strip trailing whitespace from file!
fun! <SID>StripTrailingWhiteSpaces()
	let l = line(".")
	let c = col(".")
	%s/\s\+$//e
	call cursor(l, c)
endfun
autocmd BufWritePre * :call <SID>StripTrailingWhiteSpaces()

"" Vim file visuals management
" Lines
set nu
set rnu
" Uncertain if like
highlight LineNR ctermfg=LightRed
set so=7 " Set # lines buffer to cursor for j/k moving
set cmdheight=2 " Height of cmd bar
set hid " A buffer becomes hidden when it is abandoned, idk yet
set showcmd " Shows last cmd in bot right, ex leader!
" Columns
set ruler " Uncertain if like
"set foldcolumn=1 " Add a bit of extra margin to the left
set colorcolumn=110 " How far to show 'too far'
highlight ColorColumn ctermbg=darkgray

"" Vim intra-file management
set showmatch " Show matching brackets when cursor is over
set mat=2 " How many tenths of sec to blink on matching brackets
" Text editing
set ts=2 sts=2 sw=2 " tabstop, shifttabwidth, shiftwidth
set smarttab expandtab
set ai si " autoindent, smartindent
set wrap " Wrap lines
syntax enable " Enable syntax highlighting
" Linebreak on 500 char
set lbr
set tw=500

"" Old-Old stuff, not yet processed
" Filetype detection of C
augroup project
	autocmd!
	autocmd BufRead,BufNewFile *.h,*.c set filetype=c.doxygen
augroup end

" For not overwriting buffer on paste
" noremap P "0P
" for s:i in ['"','*','+','-','.',':','%','/','=','1','2','3','4','5','6','7','8','9','a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z']
"     execute 'noremap "'.s:i.'p "'.s:i.'p'
"     execute 'noremap "'.s:i.'P "'.s:i.'P'
" endfor
" noremap <LEADER>d "0d
" noremap <LEADER>D "0D
" set timeout timeoutlen=3000 ttimeoutlen=100 " More time for mulit-key maps
xnoremap p "_dP

"" Useful stuff, from Paul, idk if want to use/how yet

"" Visual mode pressing * or # searches for the current selection
"" Super useful! From an idea by Michael Naumann
"vnoremap <silent> * :<C-u>call VisualSelection('', '')<CR>/<C-R>=@/<CR><CR>
"vnoremap <silent> # :<C-u>call VisualSelection('', '')<CR>?<C-R>=@/<CR><CR>
"
"function! CmdLine(str)
"    call feedkeys(":" . a:str)
"endfunction
"
"function! VisualSelection(direction, extra_filter) range
"    let l:saved_reg = @"
"    execute "normal! vgvy"
"
"    let l:pattern = escape(@", "\\/.*'$^~[]")
"    let l:pattern = substitute(l:pattern, "\n$", "", "")
"
"    if a:direction == 'gv'
"        call CmdLine("Ack '" . l:pattern . "' " )
"    elseif a:direction == 'replace'
"        call CmdLine("%s" . '/'. l:pattern . '/')
"    endif
"
"    let @/ = l:pattern
"    let @" = l:saved_reg
"endfunction
"
"

" Move between windows with control+h/j/k/l
map <C-j> <C-W>j
map <C-k> <C-W>k
map <C-h> <C-W>h
map <C-l> <C-W>l

"" Close the current buffer
"map <leader>bd :Bclose<cr>:tabclose<cr>gT
"
"" Close all the buffers
"map <leader>ba :bufdo bd<cr>
"
"" move between buffers
"map <leader>l :bnext<cr>
"map <leader>h :bprevious<cr>
"
"" Useful mappings for managing tabs
"map <leader>tn :tabnew<cr>
"map <leader>to :tabonly<cr>
"map <leader>tc :tabclose<cr>
"map <leader>tm :tabmove
"map <leader>t<leader> :tabnext<cr>
"
"" Let 'tl' toggle between this and the last accessed tab
"let g:lasttab = 1
"nmap <Leader>tl :exe "tabn ".g:lasttab<CR>
"au TabLeave * let g:lasttab = tabpagenr()
"
"
"" Opens a new tab with the current buffer's path
"" Super useful when editing files in the same directory
"map <leader>te :tabedit <c-r>=expand("%:p:h")<cr>/
"
"
"" Specify the behavior when switching between buffers
"try
"  set switchbuf=useopen,usetab,newtab
"  set stal=2
"catch
"endtry
"
" Return to last edit position when opening files (You want this!)
au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif

"" persistant undo
"try
"    set undodir=/tmp/
"    set undofile
"catch
"endtry

" References still using
" http://stevelosh.com/blog/2010/09/coming-home-to-vim/using-the-leader
" https://stackoverflow.com/questions/1764263/what-is-the-leader-in-a-vimrc-file#1764336
